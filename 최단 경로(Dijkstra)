#include <iostream>
#include <vector>
using namespace std;
// 음의 가중치 허용되지않음
#define MAX 100

bool visited[MAX]; // 방문한 점인지 아닌지 확인
int Dist[MAX];     // 최단 경로의 거리
int W[MAX][MAX];   // i 부터 j 까지의 거리

void Dijkstra(int s, int num)
{
  for (int i = 0; i < num; i++)
  {
    Dist[i] = W[s][i];
  }
  visited[s] = true;

  for (int i = 0; i < num - 2; i++) // 첫번째는 위에 for문에서 했고, 마지막 노드는 거리를 재설정할 필요가 없으므로 num-2
  {
    int min = 99;
    int index = -1;
    for (int j = 0; j < num; j++)
    {
      if (!visited[j] && min > Dist[j])
      {
        min = Dist[j];
        index = j;
      }
    }
    if (index == -1)
      break;
    visited[index] = true;
    for (int k = 0; k < num; k++)
    {
      if (!visited[k] && Dist[k] > (Dist[index] + W[index][k]))
        Dist[k] = (Dist[index] + W[index][k]);
    }
  }
  cout << "Shortest Paths from vertex " << s << endl;
  for (int i = 0; i < num; i++)
  {
    cout << "Vertex " << i << " : " << Dist[i] << endl;
  }
}

int main()
{
  W[0][0] = 0;
  W[0][1] = 2;
  W[0][2] = 5;
  W[0][3] = 100;
  W[0][4] = 3;

  W[1][0] = 100;
  W[1][1] = 0;
  W[1][2] = 100;
  W[1][3] = 4;
  W[1][4] = 10;

  W[2][0] = 100;
  W[2][1] = 100;
  W[2][2] = 0;
  W[2][3] = 6;
  W[2][4] = 2;

  W[3][0] = 100;
  W[3][1] = 100;
  W[3][2] = 100;
  W[3][3] = 0;
  W[3][4] = 100;

  W[4][0] = 100;
  W[4][1] = 100;
  W[4][2] = 1;
  W[4][3] = 2;
  W[4][4] = 0;
  Dijkstra(0, 5);
}
