//sorting.cpp 파일만
#include "sorting.h"
#define N 1000000

void insertionsort(std::vector<int> &arr, int left, int right)// 삽입 정렬
{
  int i, j;
  int key;

  for (i = left + 1; i <= right; i++)
  {
    j = i - 1;
    key = arr[i];
    while (j >= left && arr[j] > key)
    {
      arr[j + 1] = arr[j];
      j--;
    }
    arr[j + 1] = key;
  }
}
void swap(std::vector<int> &arr, int a, int b)// 스왑 함수
{
  int temp = arr[a];
  arr[a] = arr[b];
  arr[b] = temp;
}

int threesort(std::vector<int> &arr, int left, int right)// 중간값 분할
{
  int mid = (left + right) / 2;
  if (arr[left] > arr[mid])
    swap(arr, left, mid);
  if (arr[mid] > arr[right])
    swap(arr, mid, right);
  if (arr[left] > arr[mid])
    swap(arr, left, mid);
  return mid;
}

void quicksort(std::vector<int> &arr, int left, int right)
{
  vector<int> v(N);// 재귀호출을 제거하기위한 벡터 선언
  int top = 0;// 벡터 인덱스
  int ord = 0;// 정렬되어 있는 경우
  int rev = 0;// 정렬되어 있지않은 경우
  if (right > 99)
  {
    for (int i = 1; i < 100; i++)// 100개의 표본으로 거의 정렬, 거의 역정렬 판단
    {
      if (arr[i] <= arr[i - 1])
        rev++;// 정렬되어있지 않다면 rev++
      if (arr[i] >= arr[i - 1])
        ord++;// 정렬되어있다면 ord++
    }
  }
  if (ord > rev && ord > 75)// 100개 표본 중 75개 이상이 정렬되어 있고, ord가 rev보다 클 경우 삽입정렬의 속도가 빠르므로 삽입정렬 호출
    insertionsort(arr, left, right);
  else
  {
    v[++top] = right;
    v[++top] = left;//두 개의 원소 벡터에 넣어준다.
    while (top > 0)
    {
      int l = v[top--];
      int r = v[top--];

      if (l < r)
      {
        int m = threesort(arr, l, r);// 최악의 경우를 막기위해 중간값 분할 이용
        int pivot = arr[m];
        swap(arr, m, r - 1);
        int i = l + 1, j = r - 2;
        if (j < 0 || j < m)// 배열의 인덱스 넘어가는 경우
          break;
        while (i <= j)
        {
          while (arr[i] < pivot)// 피봇보다 작은 경우 큰 값을 찾아 i 값 조정
          {
            ++i;
          }
          while (arr[j] > pivot)// 피봇보다 큰 경우 작은 값을 찾아 j 값 조정;
          {
            --j;
          }
          if (i <= j)// 교차되지 않을 경우 i와 j 값 스왑
          {
            swap(arr, i, j);
            ++i;
            --j;
          }
        }
        swap(arr, i, r - 1);// 교차될 경우 i와 피봇값을 스왑

        if (r - i < 16)// 배열의 개수가 16개 이하일 경우 삽입정렬이 더 효과적
        {
          insertionsort(arr, i + 1, r);
        }
        else if (i < r)//재귀를 대신하여 r, i+1 두 값을 벡터에 넣어 다시 시작
        {
          v[++top] = r;
          v[++top] = i + 1;
        }
        if (j - l < 16)
        {
          insertionsort(arr, l, i - 1);
        }
        else if (l < j)
        {
          v[++top] = i - 1;
          v[++top] = l;
        }
      }
    }
  }
}

void sort(std::vector<int> &arr)
{
  int n = arr.size();
  int left = 0;
  int right = n - 1;
  quicksort(arr, left, right);
}
