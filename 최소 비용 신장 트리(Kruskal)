#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

#define MAX 100

int parent[MAX];

struct Edge
{
  int node[2];
  int distance;
  Edge(int a, int b, int dis)
  {
    this->node[0] = a;
    this->node[1] = b;
    this->distance = dis;
  }
  bool operator<(const Edge &other) const
  {
    return distance < other.distance; // 정렬 기준 거리
  }
};

int findParent(int x)
{
  if (parent[x] == x)
    return x; // 부모배열의 변화가 없었다면 인덱스와 값이 같다.

  return parent[x] = findParent(parent[x]); // 부모 배열이 변화가 있었다. 최종적으로는 인덱스와 값이 같은 노드를 찾아 올라가야 함.
}

void Kruskal(vector<Edge> v)
{
  sort(v.begin(), v.end()); // 간선이 작은순으로 정렬
  int sum = 0;

  for (int i = 0; i < v.size(); i++)
  {
    int a = findParent(v[i].node[0]);
    int b = findParent(v[i].node[1]); // 두 부모 배열을 찾는다. 이 과정에서 부모 배열 업데이트 또한 일어난다.
    if (a != b)                       // 부모 배열이 같지않다면 사이클을 형성하지 않는다.
    {
      sum += v[i].distance;
      if (a < b)
        parent[v[i].node[1]] = a;
      else
        parent[v[i].node[0]] = b; // 부모 배열 업데이트
    }
  }
  cout << sum << endl;
}

int main()
{
  vector<Edge> v;
  v.push_back(Edge(1, 2, 8));
  v.push_back(Edge(1, 3, 11));
  v.push_back(Edge(1, 4, 9));
  v.push_back(Edge(2, 5, 14));
  v.push_back(Edge(3, 4, 13));
  v.push_back(Edge(3, 6, 8));
  v.push_back(Edge(3, 7, 8));
  v.push_back(Edge(4, 5, 5));
  v.push_back(Edge(4, 7, 12));
  v.push_back(Edge(6, 7, 7));

  for (int i = 1; i <= 7; i++)
  {
    parent[i] = i;
  }
  Kruskal(v);
  for (int i = 1; i <= 7; i++)
  {
    cout << parent[i] << " "; // 부모 배열이 모두 1로 초기화되지는 않는다.
  }
  cout << endl;
}
