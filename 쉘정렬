#include <iostream>
#include <ctime>
#include <cstdlib>
using namespace std;

#define MAX 1000000

void shellSort1(int arr[], int n)
{
  int i, j, key, gap;
  for (gap = n / 2; gap > 0; gap /= 2)
  {
    for (i = gap; i < n; i++)
    {
      key = arr[i];
      j = i - gap;
      while (j >= 0 && key < arr[j])
      {
        arr[j + gap] = arr[j];
        j -= gap;
      }
      arr[j + gap] = key;
    }
  }
}

void shellSort2(int arr[], int n)
{
  int i, j, key, gap;
  gap = 1;
  while (n > gap)
  {
    gap = 3 * gap + 1;
  }
  for (gap = gap; gap > 0; gap = (gap - 1) / 3)
  {
    for (i = gap; i < n; i++)
    {
      key = arr[i];
      j = i - gap;
      while (j >= 0 && key < arr[j])
      {
        arr[j + gap] = arr[j];
        j -= gap;
      }
      arr[j + gap] = key;
    }
    if (gap == 1)
      break;
  }
}

void shellSort3(int arr[], int n)
{
  int i, j, key, gap;
  gap = 1;
  while (n > gap)
  {
    gap = 11 * gap + 1;
  }
  for (gap = gap; gap > 0; gap = (gap - 1) / 3)
  {
    for (i = gap; i < n; i++)
    {
      key = arr[i];
      j = i - gap;
      while (j >= 0 && key < arr[j])
      {
        arr[j + gap] = arr[j];
        j -= gap;
      }
      arr[j + gap] = key;
    }
    if (gap == 1)
      break;
  }
}

void checkSort(int arr[], int n)
{
  int i;
  bool sorted;
  sorted = true;
  for (i = 1; i < n; i++)
  {
    if (arr[i] < arr[i - 1])
      sorted = false;
  }
  if (sorted)
    cout << "정렬 완료." << endl;
  else
    cout << "정렬 오류." << endl;
}

int main()
{
  int arr[MAX];
  int n;
  clock_t start, end;
  cin >> n;
  srand((unsigned int)time(NULL));
  for (int i = 0; i < n; i++)
  {
    arr[i] = rand() % 100;
  }
  start = clock();
  shellSort1(arr, n);
  end = clock();
  checkSort(arr, n);
  cout << "gap is n/2 : " << end - start << endl;
  start = clock();
  shellSort2(arr, n);
  end = clock();
  checkSort(arr, n);
  cout << " gap is 3k+1 : " << end - start << endl;
  start = clock();
  shellSort1(arr, n);
  end = clock();
  checkSort(arr, n);
  cout << " gap is 11k+1 : " << end - start << endl;
}
