#include <iostream>
#include <chrono>
using namespace std;

int intarray[8][9] = {
    {3, 4, 9, -2, 2, 51, -23, 2, -1},
    {223, 7, 8, -11, 5, -99, 2, 3, -4},
    {2, 51, -23, -23, 6, 3, 2, 4, 5},
    {5, -99, 2, -1, 32, 2, 5, -99, 2},
    {6, 3, 3, -4, 2, -1, 6, 3, 3},
    {32, 2, 4, 5, 3, -4, 2, -1, 4},
    {4, 4, 23, 6, 2, -1, 3, -4, 34},
    {78, 32, 1, 7, 3, -4, -23, -23, 6}};

int m[8][9]; // 복사해 넣을 배열

int MaxNum(int a, int b)
{
  return (a < b) ? b : a;
}

void number(int intarray[8][9])
{
  int temp;
  for (int j = 0; j < 9; j++)
  {
    m[0][j] = intarray[0][j]; // 첫번째 열 값을 똑같이 넣음
  }

  for (int i = 1; i < 8; i++)
  {
    for (int j = 0; j < 9; j++)
    {
      if (j - 1 < 0) // index 0번째 행일 경우
      {
        m[i][j] = intarray[i][j] + MaxNum(m[i - 1][j], m[i - 1][j + 1]);
      }
      else if (j + 1 >= 9) // index 8번째 행일 경우
      {
        m[i][j] = intarray[i][j] + MaxNum(m[i - 1][j - 1], m[i - 1][j]);
      }
      else // 그 외 경우
      {
        m[i][j] = intarray[i][j] + MaxNum(MaxNum(m[i - 1][j], m[i - 1][j + 1]), m[i - 1][j - 1]);
      }
    }
  }

  int max_sum = m[7][0]; // 최대값을 담는 변수
  int index = 0;         // 경로 출력을 위한 j index를 담을 변수
  int route[8];          // 경로를 담을 배열

  for (int j = 1; j < 9; j++)
  {
    if (max_sum < m[7][j])
    {
      index = j;         // 최대값일 때 j인덱스
      max_sum = m[7][j]; // 최대값
    }
    route[7] = intarray[7][index]; // 가장 마지막으로 선택하는 원소
  }                                // 마지막 줄에서 가장 큰 값 찾기

  for (int i = 7; i > 0; i--)
  {
    temp = m[i - 1][index];
    if (index - 1 < 0)
    {
      if (temp < m[i - 1][index + 1])
        index = index + 1;
      route[i - 1] = intarray[i - 1][index];
    }
    else if (index + 1 >= 9)
    {
      if (m[i - 1][index - 1] > temp)
        index = index - 1;
      route[i - 1] = intarray[i - 1][index];
    }
    else
    {
      int id = index;
      if (temp < m[i - 1][index + 1])
      {
        id = index + 1;
        temp = m[i - 1][index + 1];
      }
      if (m[i - 1][index - 1] > temp)
      {
        id = index - 1;
        temp = m[i - 1][index - 1];
      }
      index = id;
      route[i - 1] = intarray[i - 1][index];
    }
  } // 마지막에서 가장 큰 값 기준으로 경로 찾아 올라가기

  cout << "최대값 : " << max_sum << endl;
  for (int i = 0; i < 8; i++)
  {
    cout << i + 1 << "번째 " << route[i] << endl;
  }
}
int main()
{
  number(intarray);
}
