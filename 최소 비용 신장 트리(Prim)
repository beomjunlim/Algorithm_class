#include <iostream>
#include <climits>
#include <vector>
#include <queue>
using namespace std;

#define MAX 100

int W[MAX][MAX];
int From[MAX] = {1};
int Dist[MAX] = {0};
int Parent[MAX];
bool visited[MAX];
vector<int> a; // 이미 지나간 정점

int findMin(int n)
{
  int min = INT_MAX;
  int index = 0;
  for (int i = 1; i <= n; i++)
  {
    if (!visited[i] && Dist[i] < min)// 방문하지 않고 Dist 거리가 작은 정점 찾음
    {
      min = Dist[i];
      index = i;
    }
  }
  return index;// 거리가 가장 적은 간선의 정점
}

void UpdateDist(int n) // 정점 추가하고 거리 업데이트
{
  for (int i = 1; i <= n; i++)
  {
    if (!visited[i])//방문하지 않은 정점까지 거리 업데이트하기 위해서
    {
      for (int j = 0; j < a.size(); j++)
      {
        if (W[a[j]][i] < Dist[i])// 기존 Dist보다 추가된 정점에서 i로 향하는 경우가 더 짧을 경우
        {
          Dist[i] = W[a[j]][i];
          From[i] = a[j]; // 시작점 업데이트
        }
      }
    }
  }
}

// Prim 알고리즘 - O(V^2)
void Prim1(int n, int num)
{
  a.push_back(n);// 정점 추가
  cout << "시작 정점 : " << n << endl;
  visited[n] = true;
  for (int i = 1; i <= num; i++)
  {
    if (i == n)
    {
      From[i] = 0;
      Dist[i] = 0;
    }
    else
    {
      From[i] = n;
      Dist[i] = W[n][i];
    }
  }// 시작점 기준으로 Fromm, Dist 배열 업데이트

  int index;
  int sum = 0;
  for (int i = 1; i <= num - 1; i++)// 마지막 정점 추가할 필요 없으므로 num-1번 시행
  {
    index = findMin(num);// 가장 작은 노선 선택
    visited[index] = true;
    Parent[index] = From[index];// index로 갈 때 출발한 지점 Parent 배열에 담아줌
    a.push_back(index);// 정점 추가
    cout << "추가 정점 : " << index << " 거리 : " << Dist[index] << endl;
    sum += Dist[index];// 거리 추가
    Dist[index] = 0;// 방문했으므로 0으로 초기화
    UpdateDist(num);// 추가한 정점에서 나머지까지 거리 업데이트
  }

  cout << "총 거리 : " << sum << endl;
}

void Print(int n, int num)
{
  for (int i = 1; i <= num; i++)
  {
    if (i != n)
    {
      cout << Parent[i] << " - " << i << endl;// 지나온 경로
    }
  }
}

// Prim 알고리즘 - O(|E|log|V|)
int W2[MAX][MAX];
bool visited_p[MAX];
int Parent2[MAX];

struct comp
{
  bool operator()(pair<int, int> &a, pair<int, int> &b)
  {
    return a.second > b.second; // 우선순위 큐라 처음에 내림차순 나중에 나오는게 크므로 원래와 반대인 듯
  }
};

void Prim2(int n, int num)
{
  priority_queue<pair<int, int>, vector<pair<int, int> >, comp> q;
  int sum = 0;
  int n = n;
  for (int i = 1; i <= num - 1; i++)
  {
    visited_p[n] = true;
    for (int j = 1; j <= num; j++)
    {
      if (W2[n][j] < INT_MAX && !visited_p[j])
      {
        q.push(make_pair(j, W2[n][j]));
      }
    }

    n = q.top().first;
    sum += q.top().second;
    q.pop();
  }
  cout << "총 거리 : " << sum << endl;
}

int main()
{
  W[1][1] = 0;
  W[1][2] = 6;
  W[1][3] = 7;
  W[1][4] = INT_MAX;
  W[1][5] = 10;
  W[1][6] = 9;

  W[2][1] = 6;
  W[2][2] = 0;
  W[2][3] = 8;
  W[2][4] = INT_MAX;
  W[2][5] = INT_MAX;
  W[2][6] = INT_MAX;

  W[3][1] = 7;
  W[3][2] = 8;
  W[3][3] = 0;
  W[3][4] = 4;
  W[3][5] = 5;
  W[3][6] = INT_MAX;

  W[4][1] = INT_MAX;
  W[4][2] = INT_MAX;
  W[4][3] = 4;
  W[4][4] = 0;
  W[4][5] = 3;
  W[4][6] = INT_MAX;

  W[5][1] = 10;
  W[5][2] = INT_MAX;
  W[5][3] = 5;
  W[5][4] = 3;
  W[5][5] = 0;
  W[5][6] = 11;

  W[6][1] = 9;
  W[6][2] = INT_MAX;
  W[6][3] = INT_MAX;
  W[6][4] = INT_MAX;
  W[6][5] = 11;
  W[6][6] = 0;
   Prim1(1, 6);
   Print(1, 6);

  W2[1][1] = 0;
  W2[1][2] = 10;
  W2[1][3] = 3;
  W2[1][4] = 8;
  W2[1][5] = INT_MAX;

  W2[2][1] = 10;
  W2[2][2] = 0;
  W2[2][3] = 13;
  W2[2][4] = INT_MAX;
  W2[2][5] = 14;

  W2[3][1] = 3;
  W2[3][2] = 13;
  W2[3][3] = 0;
  W2[3][4] = INT_MAX;
  W2[3][5] = INT_MAX;

  W2[4][1] = 8;
  W2[4][2] = INT_MAX;
  W2[4][3] = INT_MAX;
  W2[4][4] = 0;
  W2[4][5] = 9;

  W2[5][1] = INT_MAX;
  W2[5][2] = 14;
  W2[5][3] = INT_MAX;
  W2[5][4] = 9;
  W2[5][5] = 0;
  Prim2(1, 5);
}
