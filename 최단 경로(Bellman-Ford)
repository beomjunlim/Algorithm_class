#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

#define MAX 100

int W[MAX][MAX];
int Dist[MAX];
vector<pair<int, int>> E;

void BellmanFord(int v, int num)
{
  for (int i = 0; i < num; i++)
  {
    Dist[i] = W[v][i];
  }

  for (int k = 2; k <= num; k++)
  {
    for (int i = 0; i < num; i++)
    {
      if (i != v)
      {
        for (int j = 0; j < E.size(); j++)
        {
          int x = E[j].first;
          int y = E[j].second;
          if (k == num)
          {
            if (y == i)
            {
              if (Dist[i] > (Dist[x] + W[x][i]))
              {
                cout << "음의 싸이클 발생" << endl;
                return;
              }
            }
          }

          if (y == i)
          {
            Dist[i] = min(Dist[i], Dist[x] + W[x][i]);
          }
        }
      }
    }
  }
  for (int i = 0; i < num; i++)
  {
    cout << Dist[i] << endl;
  }
}

int main()
{
  E.push_back(make_pair(0, 1));
  E.push_back(make_pair(0, 2));
  E.push_back(make_pair(0, 3));

  E.push_back(make_pair(1, 4));

  E.push_back(make_pair(2, 1));
  E.push_back(make_pair(2, 4));

  E.push_back(make_pair(3, 2));
  E.push_back(make_pair(3, 5));

  E.push_back(make_pair(4, 5));

  W[0][0] = 0;
  W[0][1] = 6;
  W[0][2] = 5;
  W[0][3] = 5;
  W[0][4] = 100;
  W[0][5] = 100;

  W[1][0] = 100;
  W[1][1] = 0;
  W[1][2] = 100;
  W[1][3] = 100;
  W[1][4] = -1;
  W[1][5] = 100;

  W[2][0] = 100;
  W[2][1] = -2;
  W[2][2] = 0;
  W[2][3] = 100;
  W[2][4] = 1;
  W[2][5] = 100;

  W[3][0] = 100;
  W[3][1] = 100;
  W[3][2] = -3;
  W[3][3] = 0;
  W[3][4] = 100;
  W[3][5] = -1;

  W[4][0] = 100;
  W[4][1] = 100;
  W[4][2] = 100;
  W[4][3] = 100;
  W[4][4] = 0;
  W[4][5] = 3;

  W[5][0] = 100;
  W[5][1] = 100;
  W[5][2] = 100;
  W[5][3] = 100;
  W[5][4] = 100;
  W[5][5] = 0;

  BellmanFord(0, 6);
}
