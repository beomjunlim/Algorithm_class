#include <iostream>
#include <queue>
using namespace std;

#define MAX 100

bool visited[MAX]; // 방문 여부
int inDgree[MAX];  // 진입 간선 개수
vector<int> graph[MAX];

void Topological(int n)
{
  queue<int> q;
  for (int i = 1; i <= n; i++)
  {
    if (inDgree[i] == 0)
    {
      q.push(i); // 진입 간선이 없는 노드 큐에 삽입
    }
  }

  for (int i = 1; i <= n; i++)
  {
    if (q.empty()) // 모든 노드에대해 돌기 전 이미 큐가 비어있다면 사이클이 발생했다
    {
      cout << "cycle 발생" << endl;
      return;
    }
    int x = q.front();
    q.pop();
    visited[x] = true;
    cout << x << endl;
    for (int i = 0; i < graph[x].size(); i++)
    {
      inDgree[graph[x][i]]--;        // x로부터 들어오는 간선 삭제
      if (inDgree[graph[x][i]] == 0) // 진입 간선이 없을 경우 큐에 삽입
        q.push(graph[x][i]);
    }
  }
}

int main()
{
  graph[1].push_back(2);
  graph[1].push_back(4);

  graph[2].push_back(3);
  graph[2].push_back(5);

  graph[4].push_back(5);

  graph[5].push_back(3);
  graph[5].push_back(6);

  graph[7].push_back(4);
  inDgree[1] = 0;
  inDgree[2] = 1;
  inDgree[3] = 2;
  inDgree[4] = 2;
  inDgree[5] = 2;
  inDgree[6] = 1;
  inDgree[7] = 0;
  Topological(7);
}
